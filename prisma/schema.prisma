generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// https://authjs.dev/reference/adapter/prisma
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  managingMeets       Meet[]    @relation("Manage")
  participatingMeets  ParticipantsOnMeets[]
}

model Meet {
  id            String    @id @default(cuid())
  name          String
  description   String
  dates         String[]
  // one-to-many
  manager       User      @relation("Manage", fields: [managerId], references: [id])
  managerId     String
  // many-to-many
  participants  ParticipantsOnMeets[]
}

// junction table between User - participates - Meet
model ParticipantsOnMeets {
  meet    Meet @relation(fields: [meetId], references: [id])
  meetId  String
  user    User  @relation(fields: [userId], references: [id])
  userId  String

  @@id([meetId, userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}